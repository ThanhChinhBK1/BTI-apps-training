# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from base.models.base_model_ import Model
from base import util


class Employee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, employee_id=None, name=None, description=None):  # noqa: E501
        """Employee - a model defined in OpenAPI

        :param employee_id: The employee_id of this Employee.  # noqa: E501
        :type employee_id: str
        :param name: The name of this Employee.  # noqa: E501
        :type name: str
        :param description: The description of this Employee.  # noqa: E501
        :type description: str
        """
        self.openapi_types = {
            'employee_id': str,
            'name': str,
            'description': str
        }

        self.attribute_map = {
            'employee_id': 'employeeId',
            'name': 'name',
            'description': 'description'
        }

        self._employee_id = employee_id
        self._name = name
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'Employee':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Employee of this Employee.  # noqa: E501
        :rtype: Employee
        """
        return util.deserialize_model(dikt, cls)

    @property
    def employee_id(self):
        """Gets the employee_id of this Employee.


        :return: The employee_id of this Employee.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this Employee.


        :param employee_id: The employee_id of this Employee.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def name(self):
        """Gets the name of this Employee.


        :return: The name of this Employee.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Employee.


        :param name: The name of this Employee.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Employee.


        :return: The description of this Employee.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Employee.


        :param description: The description of this Employee.
        :type description: str
        """

        self._description = description
