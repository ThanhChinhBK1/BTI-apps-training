/*
 * apps-training RESTful API
 * OpenAPI definition file for impulse-apps
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Employee;
import org.openapitools.client.model.EmployeePostRequestBody;
import org.openapitools.client.model.EmployeePutRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmployeeApi {
    private ApiClient localVarApiClient;

    public EmployeeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteEmployee
     * @param employeeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEmployeeCall(String employeeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/{employeeId}"
            .replaceAll("\\{" + "employeeId" + "\\}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmployeeValidateBeforeCall(String employeeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling deleteEmployee(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEmployeeCall(employeeId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a list of action recommendation by targetType and targetId
     * @param employeeId  (required)
     * @return Employee
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public Employee deleteEmployee(String employeeId) throws ApiException {
        ApiResponse<Employee> localVarResp = deleteEmployeeWithHttpInfo(employeeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a list of action recommendation by targetType and targetId
     * @param employeeId  (required)
     * @return ApiResponse&lt;Employee&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Employee> deleteEmployeeWithHttpInfo(String employeeId) throws ApiException {
        okhttp3.Call localVarCall = deleteEmployeeValidateBeforeCall(employeeId, null);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a list of action recommendation by targetType and targetId
     * @param employeeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEmployeeAsync(String employeeId, final ApiCallback<Employee> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmployeeValidateBeforeCall(employeeId, _callback);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmployee
     * @param employeeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployeeCall(String employeeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/{employeeId}"
            .replaceAll("\\{" + "employeeId" + "\\}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeValidateBeforeCall(String employeeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getEmployee(Async)");
        }
        

        okhttp3.Call localVarCall = getEmployeeCall(employeeId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a list of action recommendation by targetType and targetId
     * @param employeeId  (required)
     * @return Employee
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Employee getEmployee(String employeeId) throws ApiException {
        ApiResponse<Employee> localVarResp = getEmployeeWithHttpInfo(employeeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of action recommendation by targetType and targetId
     * @param employeeId  (required)
     * @return ApiResponse&lt;Employee&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Employee> getEmployeeWithHttpInfo(String employeeId) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeValidateBeforeCall(employeeId, null);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of action recommendation by targetType and targetId
     * @param employeeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployeeAsync(String employeeId, final ApiCallback<Employee> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeValidateBeforeCall(employeeId, _callback);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmployees
     * @param randomGet  (optional)
     * @param participant  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployeesCall(Boolean randomGet, Boolean participant, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (randomGet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("random_get", randomGet));
        }

        if (participant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("participant", participant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeesValidateBeforeCall(Boolean randomGet, Boolean participant, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getEmployeesCall(randomGet, participant, _callback);
        return localVarCall;

    }

    /**
     * 
     * get employees under several conditions
     * @param randomGet  (optional)
     * @param participant  (optional)
     * @return List&lt;Employee&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Employee> getEmployees(Boolean randomGet, Boolean participant) throws ApiException {
        ApiResponse<List<Employee>> localVarResp = getEmployeesWithHttpInfo(randomGet, participant);
        return localVarResp.getData();
    }

    /**
     * 
     * get employees under several conditions
     * @param randomGet  (optional)
     * @param participant  (optional)
     * @return ApiResponse&lt;List&lt;Employee&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Employee>> getEmployeesWithHttpInfo(Boolean randomGet, Boolean participant) throws ApiException {
        okhttp3.Call localVarCall = getEmployeesValidateBeforeCall(randomGet, participant, null);
        Type localVarReturnType = new TypeToken<List<Employee>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get employees under several conditions
     * @param randomGet  (optional)
     * @param participant  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployeesAsync(Boolean randomGet, Boolean participant, final ApiCallback<List<Employee>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeesValidateBeforeCall(randomGet, participant, _callback);
        Type localVarReturnType = new TypeToken<List<Employee>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postEmployees
     * @param employeePostRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postEmployeesCall(EmployeePostRequestBody employeePostRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = employeePostRequestBody;

        // create path and map variables
        String localVarPath = "/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postEmployeesValidateBeforeCall(EmployeePostRequestBody employeePostRequestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postEmployeesCall(employeePostRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * create a new employee
     * @param employeePostRequestBody  (optional)
     * @return Employee
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public Employee postEmployees(EmployeePostRequestBody employeePostRequestBody) throws ApiException {
        ApiResponse<Employee> localVarResp = postEmployeesWithHttpInfo(employeePostRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * create a new employee
     * @param employeePostRequestBody  (optional)
     * @return ApiResponse&lt;Employee&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Employee> postEmployeesWithHttpInfo(EmployeePostRequestBody employeePostRequestBody) throws ApiException {
        okhttp3.Call localVarCall = postEmployeesValidateBeforeCall(employeePostRequestBody, null);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create a new employee
     * @param employeePostRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postEmployeesAsync(EmployeePostRequestBody employeePostRequestBody, final ApiCallback<Employee> _callback) throws ApiException {

        okhttp3.Call localVarCall = postEmployeesValidateBeforeCall(employeePostRequestBody, _callback);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putEmployeeByName
     * @param employeeId  (required)
     * @param employeePutRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putEmployeeByNameCall(String employeeId, EmployeePutRequestBody employeePutRequestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = employeePutRequestBody;

        // create path and map variables
        String localVarPath = "/employees/{employeeId}"
            .replaceAll("\\{" + "employeeId" + "\\}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putEmployeeByNameValidateBeforeCall(String employeeId, EmployeePutRequestBody employeePutRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling putEmployeeByName(Async)");
        }
        

        okhttp3.Call localVarCall = putEmployeeByNameCall(employeeId, employeePutRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * update omittetd and participate for the employee
     * @param employeeId  (required)
     * @param employeePutRequestBody  (optional)
     * @return Employee
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public Employee putEmployeeByName(String employeeId, EmployeePutRequestBody employeePutRequestBody) throws ApiException {
        ApiResponse<Employee> localVarResp = putEmployeeByNameWithHttpInfo(employeeId, employeePutRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * update omittetd and participate for the employee
     * @param employeeId  (required)
     * @param employeePutRequestBody  (optional)
     * @return ApiResponse&lt;Employee&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Employee> putEmployeeByNameWithHttpInfo(String employeeId, EmployeePutRequestBody employeePutRequestBody) throws ApiException {
        okhttp3.Call localVarCall = putEmployeeByNameValidateBeforeCall(employeeId, employeePutRequestBody, null);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update omittetd and participate for the employee
     * @param employeeId  (required)
     * @param employeePutRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putEmployeeByNameAsync(String employeeId, EmployeePutRequestBody employeePutRequestBody, final ApiCallback<Employee> _callback) throws ApiException {

        okhttp3.Call localVarCall = putEmployeeByNameValidateBeforeCall(employeeId, employeePutRequestBody, _callback);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
